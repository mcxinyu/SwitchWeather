package io.github.mcxinyu.switchweather.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CITY_BEAN".
 */
public class CityBeanDao extends AbstractDao<CityBean, String> {

    public static final String TABLENAME = "CITY_BEAN";

    /**
     * Properties of entity CityBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CityId = new Property(0, String.class, "cityId", true, "CITY_ID");
        public final static Property CityName = new Property(1, String.class, "cityName", false, "CITY_NAME");
        public final static Property ProvName = new Property(2, String.class, "provName", false, "PROV_NAME");
        public final static Property Longitude = new Property(3, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(4, String.class, "latitude", false, "LATITUDE");
        public final static Property IsLocation = new Property(5, boolean.class, "isLocation", false, "IS_LOCATION");
    }


    public CityBeanDao(DaoConfig config) {
        super(config);
    }

    public CityBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY_BEAN\" (" + //
                "\"CITY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: cityId
                "\"CITY_NAME\" TEXT," + // 1: cityName
                "\"PROV_NAME\" TEXT," + // 2: provName
                "\"LONGITUDE\" TEXT," + // 3: longitude
                "\"LATITUDE\" TEXT," + // 4: latitude
                "\"IS_LOCATION\" INTEGER NOT NULL );"); // 5: isLocation
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CityBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCityId());
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(2, cityName);
        }
 
        String provName = entity.getProvName();
        if (provName != null) {
            stmt.bindString(3, provName);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(4, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(5, latitude);
        }
        stmt.bindLong(6, entity.getIsLocation() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CityBean entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCityId());
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(2, cityName);
        }
 
        String provName = entity.getProvName();
        if (provName != null) {
            stmt.bindString(3, provName);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(4, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(5, latitude);
        }
        stmt.bindLong(6, entity.getIsLocation() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public CityBean readEntity(Cursor cursor, int offset) {
        CityBean entity = new CityBean( //
                cursor.getString(offset + 0), // cityId
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cityName
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // provName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // longitude
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // latitude
                cursor.getShort(offset + 5) != 0 // isLocation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CityBean entity, int offset) {
        entity.setCityId(cursor.getString(offset + 0));
        entity.setCityName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProvName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLatitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsLocation(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(CityBean entity, long rowId) {
        return entity.getCityId();
    }
    
    @Override
    public String getKey(CityBean entity) {
        if (entity != null) {
            return entity.getCityId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CityBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
